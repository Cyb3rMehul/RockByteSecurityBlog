{
    "version": "https://jsonfeed.org/version/1",
    "title": "RockByte Security Blog",
    "description": "",
    "home_page_url": "https://blog.rockbytesec.com",
    "feed_url": "https://blog.rockbytesec.com/feed.json",
    "user_comment": "",
    "author": {
        "name": "Mehul Panchal"
    },
    "items": [
        {
            "id": "https://blog.rockbytesec.com/the-art-of-secure-code-review-a-hackers-perspective.html",
            "url": "https://blog.rockbytesec.com/the-art-of-secure-code-review-a-hackers-perspective.html",
            "title": "The Art of Secure Code Review: A Hacker’s Perspective",
            "summary": "When you're writing code, the last thing you want is security flaws that hackers can exploit. But here’s the problem: many developers miss security issues during code reviews. These overlooked&hellip;",
            "content_html": "<p><span style=\"font-weight: 400;\">When you're writing code, the last thing you want is security flaws that hackers can exploit.</span></p>\n<p><span style=\"font-weight: 400;\">But here’s the problem: many developers miss security issues during code reviews.</span></p>\n<p><span style=\"font-weight: 400;\">These overlooked flaws can end up in the final version of the software, which then gets used in real-world applications.</span></p>\n<p><span style=\"font-weight: 400;\">And guess what? That’s exactly what bad hackers are waiting for.</span></p>\n<h3><strong>Why Do Security Issues Get Missed?</strong></h3>\n<p><span style=\"font-weight: 400;\">Code reviews are a chance for developers to go over their work with fresh eyes.</span></p>\n<p><span style=\"font-weight: 400;\">But security is often put on the back burner.</span></p>\n<p><span style=\"font-weight: 400;\">Developers are usually focused on making sure the code works and looks clean.</span></p>\n<p><span style=\"font-weight: 400;\">But the truth is, bad hackers don’t care about how pretty the code looks.</span></p>\n<p><span style=\"font-weight: 400;\">They care about finding weak spots that can be turned into security holes. When code reviews don’t pay enough attention to security, these holes stay hidden—until a bad hacker finds them.</span></p>\n<h3><strong>Malicious Hackers Are Getting Smarter</strong></h3>\n<p><span style=\"font-weight: 400;\">Malicious Hackers are always learning and getting better at breaking into systems.</span></p>\n<p><span style=\"font-weight: 400;\">They know that traditional security checks, like scanning for bugs or common problems, aren’t enough anymore.</span></p>\n<p><span style=\"font-weight: 400;\">Hackers now use more advanced methods that can find hidden vulnerabilities that regular checks might miss. This makes it harder for developers to stay ahead.</span></p>\n<p><span style=\"font-weight: 400;\">Even small mistakes in the code could turn into big security risks.</span></p>\n<h3><strong>The Hacker’s Mindset: A New Way to Review Code</strong></h3>\n<p><span style=\"font-weight: 400;\">So, how do you make sure you’re not leaving your code open to attack?</span></p>\n<p><span style=\"font-weight: 400;\">The answer is: You need to think like a hacker.</span></p>\n<p><span style=\"font-weight: 400;\">Instead of just looking for bugs or errors, put yourself in the shoes of someone who wants to break in.</span></p>\n<p><span style=\"font-weight: 400;\">Ask yourself: “How could this code be exploited?”</span></p>\n<p><span style=\"font-weight: 400;\">Think about every possible way an attacker might find and take advantage of a flaw.</span></p>\n<p><span style=\"font-weight: 400;\">Are there places where user input can mess things up? Are there areas where sensitive data could leak out?</span></p>\n<p><span style=\"font-weight: 400;\">Hackers are constantly looking for these kinds of opportunities.</span></p>\n<p><span style=\"font-weight: 400;\">By adopting a hacker’s mindset during your code reviews, you can find security issues before attackers do.</span></p>\n<p><span style=\"font-weight: 400;\">It’s like having a sneak peek at your code from the other side. You get to spot the problems early and fix them before they can be used against you.</span></p>\n<h3><strong>How to Apply This Thinking Practically?</strong></h3>\n<p><span style=\"font-weight: 400;\">Here are some simple steps to start thinking like a hacker during code reviews:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Look for Input Validation Issues:</strong><span style=\"font-weight: 400;\"> Hackers often exploit code by sending unexpected input. Make sure your code checks and filters every input from users. If you don't, hackers can use things like SQL injection to break into your system.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Test for Authentication Flaws:</strong><span style=\"font-weight: 400;\"> Hackers love to mess with login systems. Check to see if your authentication system is strong. Are there weak passwords allowed? Can someone bypass the login process?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Check for Sensitive Data Leaks:</strong><span style=\"font-weight: 400;\"> Look through your code for any information that shouldn’t be public, like passwords or personal user data. Hackers try to find ways to steal this data, so make sure it’s properly encrypted or hidden.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Think About Authorization:</strong><span style=\"font-weight: 400;\"> Even if someone is logged in, are they able to access things they shouldn’t? Make sure users can only reach what they’re supposed to.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Try to Break It:</strong><span style=\"font-weight: 400;\"> Don’t just read your code—test it. Try things you’d never expect a normal user to do. Hackers will try to break your system in ways you might not think of. See if you can find a weak spot by pushing your code to the limits.</span></li>\n</ol>\n<p> </p>\n<h3><strong>Can’t Do It Yourself?</strong></h3>\n<p><span style=\"font-weight: 400;\">I’m here to help. You handle everything else… I handle reviewing your code. Contact me today for a quick free consultation.</span></p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-12-31T16:09:40+01:00",
            "date_modified": "2024-12-31T16:09:40+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/how-to-fuzz-web-application-parameters-properly-and-detect-injection-vulnerabilities.html",
            "url": "https://blog.rockbytesec.com/how-to-fuzz-web-application-parameters-properly-and-detect-injection-vulnerabilities.html",
            "title": "How to Use GenAI to Fuzz and Detect Injection Vulnerabilities",
            "summary": "Understanding how to fuzz web application parameters is a critical skill, if you're trying to hack a web application. But if you've ever tried fuzzing using general wordlists, you’ve likely&hellip;",
            "content_html": "<p data-pm-slice=\"1 1 []\">Understanding how to fuzz web application parameters is a critical skill, if you're trying to hack a web application.</p>\n<p data-pm-slice=\"1 1 []\">But if you've ever tried fuzzing using general wordlists, you’ve likely faced frustration: large wordlists take forever to run, and most tools don’t even tell you if the responses are vulnerable.</p>\n<p>Here’s the good news:</p>\n<p>With help of GenAI (i.e. ChatGPT), you can create smarter, smaller wordlists and build scripts to detect vulnerabilities automatically.</p>\n<p>In the next 5 minutes, you’ll be equipped to efficiently fuzz web applications and find injection vulnerabilities like a Pro Hacker.</p>\n<p>Let’s dive in!</p>\n<h2 data-pm-slice=\"1 1 []\">Why Traditional Fuzzing is a Waste of Time?</h2>\n<h3>Why General Wordlists Fail?</h3>\n<p>Most wordlists are designed to cover every possibility. This sounds great, but in practice:</p>\n<ul data-spread=\"false\">\n<li>\n<p><strong>They’re huge</strong>: Thousands or even millions of entries can take hours or days to run.</p>\n</li>\n<li>\n<p><strong>They’re generic</strong>: These lists don’t consider the specific context or technologies used by the target application.</p>\n</li>\n</ul>\n<h3>Why Manual Vulnerability Detection Fails?</h3>\n<p>Tools like WFuzz, Burp Intruder and ffuf can perform fuzzing, but they simply send requests and log responses. You’re left to:</p>\n<ol start=\"1\" data-spread=\"false\">\n<li>\n<p>Analyze response codes, headers, and body content manually.</p>\n</li>\n<li>\n<p>Guess whether an unusual response is a sign of vulnerability.</p>\n</li>\n</ol>\n<p>This approach is not only slow but also easy to miss critical vulnerabilities.</p>\n<h2 data-pm-slice=\"1 1 []\">How GenAI-Powered Fuzzing and Detection Can Help?</h2>\n<p>What if you could:</p>\n<ul data-spread=\"false\">\n<li>\n<p>Generate a targeted, precise wordlist?</p>\n</li>\n<li>\n<p>Automatically identify vulnerabilities in the responses?</p>\n</li>\n</ul>\n<p>With GenAI and custom scripts, you can!</p>\n<h1><strong>Here’s how:</strong></h1>\n<h2 data-pm-slice=\"1 2 []\">Step 1: Gather Target Information</h2>\n<p>Before fuzzing, understand the application:</p>\n<ol start=\"1\" data-spread=\"false\">\n<li>\n<p><strong>Technology Stack</strong>: Is it using PHP, Python, Node.js, etc.?</p>\n</li>\n<li>\n<p><strong>Frameworks</strong>: Is it built with frameworks like Laravel, Django, or Express.js?</p>\n</li>\n<li>\n<p><strong>Parameter Patterns</strong>: Identify query parameters, headers, JSON keys, and more.</p>\n</li>\n<li>\n<p><strong>Authentication</strong>: Does it require special tokens or cookies?</p>\n</li>\n</ol>\n<h2 data-pm-slice=\"1 2 []\">Step 2: Use GenAI to Generate Wordlists</h2>\n<p>Instead of relying on massive pre-built wordlists, use GenAI to craft a tailored list.</p>\n<p>Here’s how:</p>\n<ol start=\"1\" data-spread=\"true\">\n<li>\n<p><strong>Describe the Target</strong>: Provide GenAI with details such as the tech stack, known parameters, and any special syntax (e.g., SQL-like or JSON).</p>\n</li>\n<li>\n<p><strong>Request Specific Payloads</strong>: Ask for payloads specific to injection types.</p>\n</li>\n<li>\n<p><strong>Refine the List</strong>: Review and tweak the output to remove duplicates or irrelevant payloads.</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Example GenAI Prompt</strong>:</p>\n<p>You're an expert ethical hacker. The web application you're hacking uses PHP language and MySQL database. The server is Apache. You've found a POST body parameter which looks like it might be vulnerable to SQL Injection.</p>\n<p>Write 100 non-duplicate lines of wordlist to fuzz the parameter. After fuzzing with this wordlist you should be sure whether the parameter is vulnerable.</p>\n<p>The lines of this wordlist should be URL encoded.</p>\n</blockquote>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.rockbytesec.com/media/posts/10/Screenshot-2024-12-29-at-16.05.29.png\" alt=\"\" width=\"809\" height=\"499\" sizes=\"100vw\" srcset=\"https://blog.rockbytesec.com/media/posts/10/responsive/Screenshot-2024-12-29-at-16.05.29-xs.png 300w ,https://blog.rockbytesec.com/media/posts/10/responsive/Screenshot-2024-12-29-at-16.05.29-sm.png 480w ,https://blog.rockbytesec.com/media/posts/10/responsive/Screenshot-2024-12-29-at-16.05.29-md.png 768w ,https://blog.rockbytesec.com/media/posts/10/responsive/Screenshot-2024-12-29-at-16.05.29-lg.png 1024w ,https://blog.rockbytesec.com/media/posts/10/responsive/Screenshot-2024-12-29-at-16.05.29-xl.png 1360w ,https://blog.rockbytesec.com/media/posts/10/responsive/Screenshot-2024-12-29-at-16.05.29-2xl.png 1600w\"></figure>\n<h2 data-pm-slice=\"1 3 []\">Step 3: Automate Detection with Scripts</h2>\n<p>After generating a wordlist, automate vulnerability detection with Python or any scripting language you’re comfortable with. OR you can use GenAI to generate detection script functions for you.</p>\n<h3>Sample Python Script</h3>\n<p>Here’s a simple script to fuzz parameters and detect SQL injection vulnerabilities:</p>\n<pre><code>import requests\n\n# Target URL and parameter\nurl = \"https://example.com/login\"\nparams = {\"username\": \"FUZZ\", \"password\": \"test\"}\n\n# Fuzz payloads\npayloads = [\n    \"' OR 1=1--\",\n    \"' UNION SELECT NULL--\",\n    \"admin' --\",\n]\n\n# Fuzzing loop\nfor payload in payloads:\n    print(f\"Testing payload: {payload}\")\n    params[\"username\"] = payload\n    response = requests.post(url, data=params)\n    \n    # Simple detection logic tailored for the application\n    if \"Welcome\" in response.text or response.status_code == 200:\n        print(f\"[+] Vulnerable to SQL Injection! Payload: {payload}\")\n    else:\n        print(\"[-] Not vulnerable.\")</code></pre>\n<blockquote>\n<p><strong>How It Works</strong>:</p>\n<ul data-spread=\"false\">\n<li>\n<p>Replaces the <code>FUZZ</code> placeholder in the <code>username</code> parameter with each payload.</p>\n</li>\n<li>\n<p>Sends POST requests to the target.</p>\n</li>\n<li>\n<p>Checks if the response indicates a vulnerability (e.g., status code or specific text).</p>\n</li>\n</ul>\n</blockquote>\n<h3>Expand to Other Vulnerabilities</h3>\n<p>Modify the payloads and detection logic to test for:</p>\n<ul data-spread=\"false\">\n<li>\n<p><strong>XSS</strong>: Check if payloads are reflected in the response.</p>\n</li>\n<li>\n<p><strong>Command Injection</strong>: Detect unusual system behavior or output.</p>\n</li>\n<li>\n<p><strong>Path Traversal</strong>: Look for directory listings or file contents.</p>\n</li>\n</ul>\n<h2 data-pm-slice=\"1 1 []\">Conclusion</h2>\n<p>Fuzzing doesn’t have to be slow or ineffective.</p>\n<p>By using GenAI for smart wordlist generation and automating detection with scripts, you can uncover vulnerabilities efficiently and effectively.</p>\n<p>Follow me on 𝕏 @CyberMehul for updates on new blogs.</p>\n<div><hr></div>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-12-29T16:08:41+01:00",
            "date_modified": "2024-12-29T16:12:45+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/how-to-overcome-third-party-cybersecurity-risks-easily-your-vendors-are-the-weakest-link.html",
            "url": "https://blog.rockbytesec.com/how-to-overcome-third-party-cybersecurity-risks-easily-your-vendors-are-the-weakest-link.html",
            "title": "How to Overcome Third-Party Cybersecurity Risks Easily: Your Vendors are the Weakest Link",
            "summary": "Imagine locking your house doors with the best locks. But what if that lock’s key could easily be replicated? Or that lock could easily be broken? Or there’s a window&hellip;",
            "content_html": "<p><span style=\"font-weight: 400;\">Imagine locking your house doors with the best locks. But what if that lock’s key could easily be replicated? Or that lock could easily be broken? Or there’s a window left open in the house?</span></p>\n<p><span style=\"font-weight: 400;\">That’s what happens when companies use third-party software that isn’t secure.</span></p>\n<p><span style=\"font-weight: 400;\">In the article below, I’ll show you how to overcome third-party cybersecurity risks easily.</span></p>\n<h2><strong>Attackers Love Third-Party Software</strong></h2>\n<p><span style=\"font-weight: 400;\">Third-party software is like a tool you borrow instead of building your own. It’s faster, cheaper, and often better than trying to rebuild the wheel.</span></p>\n<p><span style=\"font-weight: 400;\">But here’s a catch: if that software isn’t set up properly or updated regularly, it’s like leaving that window open for burglars.</span></p>\n<p><span style=\"font-weight: 400;\">Hackers know this.</span></p>\n<p><span style=\"font-weight: 400;\">They look for vulnerabilities in third-party tools, because they’re easier to attack.</span></p>\n<p><span style=\"font-weight: 400;\">Even if the rest of your system is strong, that one weak spot can let attackers in.</span></p>\n<h2><strong>You Can’t Avoid Using Third-Party Software</strong></h2>\n<p><span style=\"font-weight: 400;\">You can’t run a business without using third-party software.</span></p>\n<p><span style=\"font-weight: 400;\">Whether it’s for payment processing, email, or project management or anything for that matter, these tools are essential. </span></p>\n<p><span style=\"font-weight: 400;\">But they come with risks:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Poor Implementation</strong><span style=\"font-weight: 400;\">: If the software isn’t set up right, hackers can exploit it.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Outdated Versions</strong><span style=\"font-weight: 400;\">: Old versions of software often have known vulnerabilities. Hackers know exactly where to strike.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Hidden Weaknesses</strong><span style=\"font-weight: 400;\">: Even if everything seems fine, there might still be security flaws you can’t see.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Posed risks on system</strong><span style=\"font-weight: 400;\">: Your system might not be configured properly to use third-party softwares, even though third-party softwares are implemented properly.</span></li>\n</ul>\n<h2><strong>What Will Help Overcome Third-Party Cybersecurity Risks?</strong></h2>\n<p><span style=\"font-weight: 400;\">So, how do you protect your company? The answer is </span><strong>penetration testing</strong><span style=\"font-weight: 400;\">.</span></p>\n<p><span style=\"font-weight: 400;\">Think of it like hiring a professional “good guy” hacker to try and break into your system.</span></p>\n<p><span style=\"font-weight: 400;\">This test shows you:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">If your third-party software is properly set up.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Whether it’s up to date or has vulnerabilities.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Any weak spots that hackers could exploit.</span></li>\n</ol>\n<p><span style=\"font-weight: 400;\">Good Hackers simulate real-world attacks.</span></p>\n<p><span style=\"font-weight: 400;\">Pentesting helps you fix problems before hackers can find them. It’s like closing and locking that open window before a burglar gets in.</span></p>\n<h2><strong>What Can You Do To Protect Against Attacks?</strong></h2>\n<p><span style=\"font-weight: 400;\">You can reduce third-party cybersecurity risks:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Update Regularly</strong><span style=\"font-weight: 400;\">: Always install updates as soon as they’re available.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Choose Trusted Vendors</strong><span style=\"font-weight: 400;\">: Only use software from reputable companies.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Schedule Penetration Tests</strong><span style=\"font-weight: 400;\">: Regularly test your systems to ensure everything is secure.</span></li>\n</ol>\n<p><span style=\"font-weight: 400;\">Third-party software makes life easier, but it also comes with risks.</span></p>\n<p><span style=\"font-weight: 400;\">By taking steps like penetration testing, you can keep your business safe and make sure those tools work for you, and not against you.</span></p>\n<p><span style=\"font-weight: 400;\">Don’t let your vendors be the weakest link in your cybersecurity chain.</span></p>\n<p><span style=\"font-weight: 400;\">You can do this yourself or we can do this for you… OR We handle simulated hacking and you handle everything else.</span></p>\n<p> </p>\n<p><span style=\"font-weight: 400;\"><a href=\"mailto:mehul@rockbytesec.com\">Contact me</a> today to take the first step towards overcoming third-party cybersecurity risks on your systems.</span></p>\n<p> </p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-12-22T22:23:40+01:00",
            "date_modified": "2024-12-22T22:23:40+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/how-to-dramatically-decrease-cyberattacks-of-your-systems.html",
            "url": "https://blog.rockbytesec.com/how-to-dramatically-decrease-cyberattacks-of-your-systems.html",
            "title": "How to Dramatically Decrease CyberAttacks on Your Systems",
            "summary": "CyberAttacks have been massively increasing in numbers day by day. This trend will continue aggressively due to the rise of Artificial Intelligence. Most businesses would suffer as their functionality is&hellip;",
            "content_html": "<p><span style=\"font-weight: 400;\"><strong>C</strong>yberAttacks have been massively increasing in numbers day by day. This trend will continue aggressively due to the rise of Artificial Intelligence.</span></p>\n<p><span style=\"font-weight: 400;\">Most businesses would suffer as their functionality is huge and not secure enough. Unsecured functionality is directly proportional to the number of cyberattacks. But I have a plan to secure every bit of functionality.</span></p>\n<p><span style=\"font-weight: 400;\">In this article, I’m going to share my plan. So that you can implement it and ensure greater security of your systems.</span></p>\n<h3><strong>Your Hidden Weaknesses Could Be an Open Invitation to Hackers</strong></h3>\n<p><span style=\"font-weight: 400;\">Your company’s security is like a locked door of a house. You might think it’s secure because it has a big, shiny padlock. But what if there’s a window left open, or a hidden back door you’ve forgotten about? Cyberattacks often happen in exactly this way.</span></p>\n<p><span style=\"font-weight: 400;\">Many businesses focus on obvious vulnerabilities while their hidden weaknesses — known as the </span><strong>attack surface</strong><span style=\"font-weight: 400;\"> — remain wide open for hackers to exploit.</span></p>\n<p><span style=\"font-weight: 400;\">And the <strong>scary</strong> <strong>part</strong>: you might not even know these weaknesses exist until it’s too late.</span></p>\n<h3><strong>Why Automated Tools Alone Don’t Solve the Problem</strong></h3>\n<p><span style=\"font-weight: 400;\">Most businesses rely on automated tools to find security vulnerabilities. These tools are far from perfect. Here’s how:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Missed Weak Spots</strong><span style=\"font-weight: 400;\">: Automated scanners can overlook critical vulnerabilities, especially in complex systems. A malicious hacker can easily outsmart an automated scanner, even AI-powered ones.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>False Positives</strong><span style=\"font-weight: 400;\">: These tools often generate long lists of potential threats, many of which aren’t real problems. This is a waste of time and resources.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>General Mitigation Guidelines</strong><span style=\"font-weight: 400;\">: Resolving the found vulnerabilities requires a really good explanation, tailored according to the system in question. But automated tools provide general mitigation guidelines, which is none of use.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Unresolved Issues</strong><span style=\"font-weight: 400;\">: Even after fixing the vulnerabilities detected by automated tools, companies still face breaches. Malicious hackers find and exploit weaknesses creatively.</span></li>\n</ol>\n<p><span style=\"font-weight: 400;\">The result? Attacks keep happening, even after you’ve done your effort.</span></p>\n<p><span style=\"font-weight: 400;\">To counter this, I’ve come up with a great solution. You see, automated tools and Artificial Intelligence can’t match a human’s creativity. Specifically when that human is an expert manual hacker.</span></p>\n<p><span style=\"font-weight: 400;\">But what outsmarts both automation and AI, is an expert manual hacker using automation and AI assistance. And that’s the ultimate solution to cover undiscovered attack surfaces.</span></p>\n<p><span style=\"font-weight: 400;\">Let me explain.</span></p>\n<h3><strong>Manual Penetration Testing with AI Assistance</strong></h3>\n<p><span style=\"font-weight: 400;\">To dramatically decrease cyberattacks, we need to think like a malicious hacker. That’s where </span><strong>manual penetration testing</strong><span style=\"font-weight: 400;\"> comes in.</span></p>\n<h4><strong>What Is Manual Penetration Testing?</strong></h4>\n<p><span style=\"font-weight: 400;\">Manual penetration testing (often called “pentesting”) is a process where trained cybersecurity experts act like malicious hackers. They try to break into your systems using real-world methods. Unlike automated tools, they approach your systems creatively and from all angles. They explore areas that a machine would never think to check.</span></p>\n<p><span style=\"font-weight: 400;\">It’s like many simulations of real-world malicious cyber attacks.</span></p>\n<h4><strong>You know why it works?</strong></h4>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Complete Attack Simulation</strong><span style=\"font-weight: 400;\">: Pentesters don’t just run scans, they simulate the strategies used by cybercriminals, covering every possible entry point.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Human Expertise</strong><span style=\"font-weight: 400;\">: Skilled professionals adapt to your unique systems, uncovering vulnerabilities that automated tools miss.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Prioritization</strong><span style=\"font-weight: 400;\">: Instead of overwhelming you with false alarms, pentesters focus on real, high-risk threats, helping you address what matters most.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong style=\"font-family: var(--editor-font-family); font-size: inherit;\">Mitigation</strong><span style=\"font-weight: 400;\">: Pentesters further guide and help you fix the vulnerabilities found during the penetration tests.</span></li>\n</ul>\n<h4><strong>Here comes Artificial Intelligence:</strong></h4>\n<p><span style=\"font-weight: 400;\">While human experts are essential, AI can supercharge their efforts. Advanced AI tools help pentesters analyze complex systems faster, identify patterns, and predict potential attack vectors.</span></p>\n<p><span style=\"font-weight: 400;\">It’s the best of both worlds: human creativity and machine efficiency.</span></p>\n<h3><strong>How can this help your business?</strong></h3>\n<p><span style=\"font-weight: 400;\">By investing in AI-powered Manual Penetration Testing, you can:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Reduce Your Attack Surface</strong><span style=\"font-weight: 400;\">: Discover and secure hidden vulnerabilities before hackers find them.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Avoid Costly Breaches</strong><span style=\"font-weight: 400;\">: Save your company from financial loss, reputational damage, and legal troubles.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Sleep Better at Night</strong><span style=\"font-weight: 400;\">: With comprehensive testing, you can be confident that your systems are truly secure.</span></li>\n</ul>\n<p><span style=\"font-weight: 400;\">Hackers are always evolving, and your security needs to keep up. Automated tools alone can’t protect your business. Manual penetration testing, </span><strong>powered by AI</strong><span style=\"font-weight: 400;\">, gives you the edge you need to stay ahead.</span></p>\n<p><span style=\"font-weight: 400;\">Don’t wait for an attack to expose your weaknesses.</span></p>\n<p><span style=\"font-weight: 400;\">You can do this yourself or we can do this for you. We handle simulated hacking and you handle everything else. <a href=\"mailto:mehul@rockbytesec.com\" target=\"_blank\" rel=\"noopener noreferrer\">Contact me</a> today to take the first step towards dramatically reducing cyberattacks on your systems.</span></p>\n<p> </p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-12-16T14:21:24+01:00",
            "date_modified": "2024-12-31T01:46:20+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/how-to-beat-ai-in-cyber-warfare.html",
            "url": "https://blog.rockbytesec.com/how-to-beat-ai-in-cyber-warfare.html",
            "title": "Let&#x27;s Beat AI in Cyber Warfare",
            "summary": "AI has gotten so powerful that I had to think about the dangers it can bring to businesses. Who knows when AI warfare starts, right? So, in the next 5&hellip;",
            "content_html": "<p><span style=\"font-weight: 400;\">AI has gotten so powerful that I had to think about the dangers it can bring to businesses. Who knows when AI warfare starts, right? So, in the next 5 minutes, I’m going to tell you how your business can beat AI-enhanced cyber attacks and secure it enough that hackers will think twice before attacking. Let’s get into it.</span></p>\n<p><span style=\"font-weight: 400;\"><strong>Before the AI revolution</strong>, Hackers were using manual and automated ways to attack systems. They had to put a lot of effort into the craft of attacks. From researching the target to final exploitation, it took way too long. Along that journey, there was also a possibility for the hacker to hit a tough roadblock.</span></p>\n<p><span style=\"font-weight: 400;\">All in all, Hacking before the AI revolution was a tough game. The barrier to entry for a normal person to become a hacker was really high.</span></p>\n<p><strong><span style=\"color: #7e8c8d;\">AI is not Sci-fi anymore.</span></strong></p>\n<p><span style=\"font-weight: 400;\">Anyone can learn to use GenAI and derivatives. Due to this, most businesses will see a rise in AI based cyber attacks. There’s already a lot of successful AI-enhanced attacks by hackers, without roadblocks on their journey. It’s getting easier for people to learn AI and AI-enhanced hacking. So, cyber attacks are increasing at an insane pace.</span></p>\n<p><span style=\"font-weight: 400;\">A day will come when anyone with a mobile phone will be able launch an AI based cyber attack with the tap of a button. It’s not that far, considering what products are currently available in the market.</span></p>\n<p><span style=\"font-weight: 400;\">Existing defenses against cyber attacks won’t work anymore. You can monitor your systems endlessly with 24/7 Security Operations Centers (SOC). But that costs a lot and it’s not foolproof.</span></p>\n<p><strong>So, how to beat AI?</strong></p>\n<p><span style=\"font-weight: 400;\">What about using AI in SOC? </span><span style=\"font-weight: 400;\">Aside from it being an expensive solution, it will not mitigate the security flaws that your system has.</span></p>\n<p><span style=\"font-weight: 400;\">Malicious actors are using AI-powered tools like PentestGPT, thanks to it being open-source. I have pointed out how Chinese hackers are using advanced systems to pentest in my post <a href=\"https://x.com/0daysecured/status/1773230821756789224?s=46\">here on 𝕏</a></span><span style=\"font-weight: 400;\">. Imagine making that system AI powered.</span></p>\n<p><span style=\"font-weight: 400;\">In my opinion, our best weapon to beat AI based cyber attacks is AI-enhanced Penetration Tests.</span></p>\n<p><span style=\"font-weight: 400;\">Developers are already using AI to develop systems and fix vulnerabilities. So, using AI to enhance performance of a manual penetration tester can be extremely fruitful.</span></p>\n<p><span style=\"font-weight: 400;\">In this scenario, businesses deserve quick and high-quality pentest results, which is only possible using AI-powered tools. The <strong>PentestGPT</strong> is a great example of what an AI-powered penetration testing tool looks like. It can help penetration testers perform with higher quality and speed than ever before.</span></p>\n<p><span style=\"font-weight: 400;\">The question of the year 2025 is: Are you using AI to secure your business?</span></p>\n<p> </p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-11-19T16:27:20+01:00",
            "date_modified": "2024-11-20T18:45:54+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/rockbyte-security-top-10-web-application-vulnerabilities.html",
            "url": "https://blog.rockbytesec.com/rockbyte-security-top-10-web-application-vulnerabilities.html",
            "title": "RockByte Security&#x27;s Top 10 Web Application Vulnerabilities",
            "summary": "These are the top 10 vulnerabilities that I look for when I pentest a Web Application. I will be dumping all that I have learned about these vulnerabilities and their&hellip;",
            "content_html": "<p>These are the top 10 vulnerabilities that I look for when I pentest a Web Application. I will be dumping all that I have learned about these vulnerabilities and their fixes in this and subsequent posts.</p>\n<p>Here's the list of all those vulnerabilities, so that you won't have to scroll down to know them all:</p>\n<ol>\n<li>Broken Access Control</li>\n<li>JSON Web Token (JWT)</li>\n<li>NoSQL injection</li>\n<li>File Upload</li>\n<li>SSRF</li>\n<li>XXE</li>\n<li>Broken Autentication</li>\n<li>XSS</li>\n<li>Sensitive Data Exposure</li>\n<li>Business Logic Failure</li>\n</ol>\n<h4>1. Broken Access Control</h4>\n<p>Role-Based Access Control comes into play where there's a hierarchy in an application. Just like any organisation's hierarchy, applications have their own set of roles. These roles allow users to have privileges.</p>\n<p>Each role has its own set of privileges in an application. There's two types of Broken Access Control: Horizontal and Vertical.</p>\n<p>To perform Horizontal BAC, you need to perform actions that another user, of same role as your user, can perform.</p>\n<p>To perform Vertical BAC, you need to perform actions that another user, of a higher role than your user, can perform.</p>\n<p>That's the simplest BAC explanation I could ever give. Here's few pages that you can to go down deeper into BAC:</p>\n<p><a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">https://owasp.org/Top10/A01_2021-Broken_Access_Control/</a></p>\n<p><a href=\"https://owasp.org/www-community/Broken_Access_Control\">https://owasp.org/www-community/Broken_Access_Control</a></p>\n<p><a href=\"https://hackerone.com/reports/1323406\">https://hackerone.com/reports/1323406</a></p>\n<p><a href=\"https://hackerone.com/reports/493324\">https://hackerone.com/reports/493324</a></p>\n<h4>2. JSON Web Token (JWT)</h4>\n<p>JSON Web tokens can be used in a wide range of functionality where integrity is a main requirement. Most common use is in Authorization of a user. Authorizing a user into an application is a task that requires rigid parameters, so that the user can only perform the tasks that it's supposed to.</p>\n<p>JWT tokens have below structure:</p>\n<pre class=\"language-javascript\"><code>[Signature information].[DATA].[Signature]</code></pre>\n<p><strong>Signature information: </strong>It defines the algorithm that has been used to generate the <strong>Signature</strong>.</p>\n<p><strong>DATA:</strong> This part of JWT has the data that contains information about the user and the session.</p>\n<p>The <strong>Signature</strong> is always created with the algorithm specified in the <strong>Signature information</strong> and a secret key which is stored on the server. The server verifies the Signature of the JWT token by using this secret key into the reverse algorithm and ensures the integrity of data.</p>\n<p>There are a lot of attacks which could be performed to misuse JWT tokens. All the type of attacks and their recipes are mentioned in this page: <a href=\"https://book.hacktricks.xyz/pentesting-web/hacking-jwt-json-web-tokens\">https://book.hacktricks.xyz/pentesting-web/hacking-jwt-json-web-tokens</a></p>\n<p>Have fun ripping apart the tokens.</p>\n<h4>3. NoSQL injection</h4>\n<p>There are various types of NoSQL databases. Most commonly used is MongoDB. But the techniques to attack these databases is almost similar.</p>\n<p>Unlike regular SQL queries, NoSQL queries are constructed using JSON objects:</p>\n<pre class=\"language-javascript\"><code>{\n    object: String, \n    q: Expression, \n    fields: Array of String, \n    groupBy: Array of String, \n    aggregation: Object mapping fields to aggregate functions \n}</code></pre>\n<p>This simple query retrieves the name and salary of all employees in position of \"Sales Manager\":</p>\n<pre class=\"language-json\"><code>{ \n    \"object\": \"employees\",\n    \"q\": { \n        \"position\" : \"Sales Manager\"  \n    },\n    \"fields\": [\"name\", \"salary\"] \n}</code></pre>\n<p>Queries can also be used to compare an object's fields to constant values using common comparison operators. For example, to retrieve all fields for all employees under the age of 25, you can use the following query:</p>\n<pre class=\"language-json\"><code>{ \n    \"object\": \"employees\",\n    \"q\": {\n        \"age\": { \"$lt\" : 25 } \n    }  \n} </code></pre>\n<p>In an application, normal authentication would look like:</p>\n<pre class=\"language-json\"><code>{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}</code></pre>\n<p>An example of successful exploitation of that authentication would be:</p>\n<pre class=\"language-json\"><code>{\n    \"username\": {\"$in\": [\"admin\", \"administrator\", \"superadmin\"]},\n    \"password\": {\"$ne\": \"\"}\n}</code></pre>\n<p>All possible attack scenarios are explained by below references:</p>\n<p><a href=\"https://book.hacktricks.xyz/pentesting-web/nosql-injection\">https://book.hacktricks.xyz/pentesting-web/nosql-injection</a></p>\n<p><a href=\"https://portswigger.net/web-security/nosql-injection\">https://portswigger.net/web-security/nosql-injection</a></p>\n<h4>4. File Upload</h4>\n<p>File upload functionlities are most likely to be vulnerable in a Web Application, due to a lot of factors involved such as file name, extension, content, etc...</p>\n<p>The first thing I do when I see a file upload functionality is that I check for what file names, extensions and contents are allowed. The best way to deal with this is to always use a wordlist to fuzz parameters of the endpoint.</p>\n<p>After fuzzing, you should be able to figure out what is allowed and what is not. And according to that, it's good to conclude whether there's a way in which you could somehow upload a file with malicious content.</p>\n<p>Now the malicious uploaded file doesn't have to be executing at the moment, because this very file could be used as a backdoor and can be used successfully to further exploit the application server.</p>\n<p>Here's few pages that you can refer to:</p>\n<p><a href=\"https://portswigger.net/web-security/file-upload\">https://portswigger.net/web-security/file-upload</a></p>\n<p><a href=\"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload\">https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload</a></p>\n<h4>5. SSRF</h4>\n<p>Backend's of modern applications usually communicate with third-party API's to exchange data, to fulfill the requirements of the application's functionality as a whole.</p>\n<p>If this type of communication is somehow exposed by the backend to the frontend of the application, then it could be possible to manipulate the connection and make the backend to connect to attacker's server instead of the supposed connection to third-party API.</p>\n<p>This connection to attacker's server could be used by the attacker to maliciously use the third-party service to exchange data or possibly perform remote code execution on the backend. This could compromise the whole application.</p>\n<p>Here's the few pages for references:</p>\n<p><a href=\"https://portswigger.net/web-security/ssrf\">https://portswigger.net/web-security/ssrf</a></p>\n<p><a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">https://owasp.org/www-community/attacks/Server_Side_Request_Forgery</a></p>\n<h4>6. XXE</h4>\n<p>When an XML document containing malicious External Entity gets parsed through XML parser, it executes according to attacker's intent, then it's called XML External Entity vulnerability.</p>\n<p>This attack could lead to several types of impacts including Server Side Request Forgery (SSRF) and Remote Code Execution (RCE).</p>\n<p>Below is an example of non-malicious XML:</p>\n<pre class=\"language-apacheconf\"><code>&lt;?xml  version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE note&gt;\n&lt;note&gt;\n&lt;to&gt;John&lt;/to&gt;\n&lt;from&gt;Doe&lt;/from&gt;\n&lt;heading&gt;TODO&lt;/heading&gt;\n&lt;body&gt;Send an email to Donald&lt;/body&gt;\n&lt;/note&gt;</code></pre>\n<p>Below is an example of malicious XML:</p>\n<pre class=\"language-javascript\"><code>&lt;?xml  version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ELEMENT foo ANY &gt;\n   &lt;!ENTITY xxe SYSTEM  \"file:///dev/random\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</code></pre>\n<p class=\"intro\">An XML document with correct syntax is called \"Well Formed\". An XML document validated against a DTD (Document Type Definition) is both \"Well Formed\" and \"Valid\". The DTD should be defined to the parser by the application developer. If not properly defined, then it could lead to XXE attack.</p>\n<p>Here's few pages for reference:</p>\n<p><a>https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></p>\n<p><a href=\"https://www.hackerone.com/knowledge-center/xxe-complete-guide-impact-examples-and-prevention\">https://www.hackerone.com/knowledge-center/xxe-complete-guide-impact-examples-and-prevention</a></p>\n<p> </p>\n<h4>7. Broken Authentication</h4>\n<p>Entrypoints of most applications is an authentication mechanism which let's legitimate users use session of the application after using their credentials.</p>\n<p>But when this mechanism is not properly implemented, then the application is vulnerable to a lot of authentication attacks including use Default Credentials, broken MFA and Brute-force attacks.</p>\n<p>The impact of this vulnerability depends on the domain of the application, as this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.</p>\n<p>Here's few pages for reference:</p>\n<p><a href=\"https://portswigger.net/web-security/authentication\">https://portswigger.net/web-security/authentication</a></p>\n<p><a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication</a></p>\n<h4>8. XSS</h4>\n<p>Cross-site Scripting (XSS) attack involves executing arbitrary Javascript code on victim's browser. This could help attacker to steal victim's account information or to perform actions on behalf of victim in an application.</p>\n<p>There are 3 types of XSS:</p>\n<ul>\n<li>Reflected Cross-site Scripting</li>\n<li>Stored Cross-site Scripting</li>\n<li>DOM-based Cross-site Scripting</li>\n</ul>\n<h6>Reflected XSS</h6>\n<p>Attacker crafts and sends an exploit URL to the victim using social engineering. This exploit URL contains malicious characters with arbitrary javascript code in the parameter's value. Now this arbitrary javascript code get's executed when victim clicks that URL.</p>\n<h6>Stored XSS</h6>\n<p>The attacker crafts an exploit similar to Reflected XSS but instead of sending exploit URL to victim, the attacker inserts it into an information storing function in the application or third-party application which is retrievable through another function of the application. When victim uses the retrieve function, the malicious Javascript executes.</p>\n<h6>DOM-based XSS</h6>\n<p>DOM stands for Document Object Model of browsers. DOM has a source and a sink. A DOM source serves function of retrieving data from user's input and DOM sink serves the function of processing the retrieved data. Javascript takes data from sources and passes it to the sink. This attack happens when an attacker inserts malicious characters and arbitrary Javascript code into DOM source, and this code is later processed by DOM sink and the arbitrary Javascript code is executed.</p>\n<p>Here's few pages for reference:</p>\n<p><a href=\"https://portswigger.net/web-security/cross-site-scripting\">https://portswigger.net/web-security/cross-site-scripting</a></p>\n<p><a href=\"https://owasp.org/www-community/attacks/xss/\">https://owasp.org/www-community/attacks/xss/</a></p>\n<h4>9. Sensitive Data Exposure</h4>\n<p>Everyone has to do their own research about where to look for this bug class, because every web application is made for a specific business logic.</p>\n<p>All it takes to figure out where to look, is understanding the business logic. But some of the places are generally usable for every type of web application:</p>\n<pre class=\"language-bash\"><code>- Social Media\n\n- Search engines: https://github.com/T43cr0wl3r/OSINT-RECON/blob/master/Dorking.md\n\n- Quick Hits: https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/quickhits.txt\n\n- Github - Employee's/Contractor's property (Social Media, Portfolio etc...)\n\n- Other OSINT methods\n\n- Web App Errors\n\n- AI dumps: (i.e. ChatGPT share leaks)\n\n- WayBack Machine</code></pre>\n<h4>10. Business Logic Failure</h4>\n<p>Business Logic Flaws are simply failure of the application to follow the rules of business. This bug class is diverse and huge enough to understand without an example.</p>\n<p>So, here's an example:</p>\n<p>An e-commerce bookstore web application is designed to handle discount code. For example, there's a discount run by the company for 20% discount. An attacker tries to use the same discount code twice on total cart value of $1000, on the first try, the discount code works as expected and gives the final price to be $800.</p>\n<p>Then, the attacker applies the discount code again and the application gives discount of 20% again, so the final price becomes $640. In this example, the application fails to check whether the discount code has been already used on the cart.</p>\n<p>Here's few pages for reference:</p>\n<p><a href=\"https://portswigger.net/web-security/logic-flaws\">https://portswigger.net/web-security/logic-flaws</a></p>\n<p><a href=\"https://owasp.org/www-community/vulnerabilities/Business_logic_vulnerability\">https://owasp.org/www-community/vulnerabilities/Business_logic_vulnerability</a></p>\n<h3>Conclusion</h3>\n<p>These vulnerabilities are a huge challenge for any organization looking forward to make their web applications secure. Hopefully, this post by me provided you an insight on Top 10 vulnerabilities in this era of web applications. Thank you for reading and stay tuned on my 𝕏 for more posts and content like this.</p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-04-10T16:55:34+02:00",
            "date_modified": "2024-06-04T17:54:59+02:00"
        },
        {
            "id": "https://blog.rockbytesec.com/7-cybersecurity-tips-for-developers.html",
            "url": "https://blog.rockbytesec.com/7-cybersecurity-tips-for-developers.html",
            "title": "7 CyberSecurity Tips for Developers",
            "summary": "No matter how many penetration tests your organization runs per year, this thing always gives you headaches and overtime. Yes, we’re talking about manual penetration tests. It’s undeniable that every&hellip;",
            "content_html": "<p>No matter how many penetration tests your organization runs per year, this thing always gives you headaches and overtime. Yes, we’re talking about manual penetration tests.</p><p>It’s undeniable that every now and then you get a list of vulnerabilities in a report created by penetration testers. You’ve definitely experienced fixing these vulnerabilities in your web applications.</p><p>But it’s certainly not as easy as it is to spell the names of the vulnerabilities.</p><p>Here are the top 7 CyberSecurity Tips, these tips will save you from getting migraines:</p><h2 id=\"1-input-validation\">1. Input Validation</h2>\n<p>While creating the web application, you should make a note of every function that takes user input. An Excel sheet would work wonders. Name of the parameter, what type of values, etc…</p><p>Closely understand what is the requirement of the user’s input here and how you could take the minimum possible input from the user.</p><p>Boolean, Integers and Floats types are safe inputs by design but Strings and Objects types are where penetration testers try to have their fun.</p><p>It’s best practice to determine which type of input is required. On top of it, using Regex to whitelist and verify that input is really what is expected by the application.</p><p><strong>For Example:</strong> You need to take input as an email address. Instead of taking the input and immediately processing it through the database, you should process it through a middleware function like this:</p><pre><code class=\"language-js\">function validateEmail(email) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegex.test(email);\n}\n</code></pre>\n<p>This was just an example of what middleware function could be used to validate email addresses from the user’s input.</p><p>After understanding the above code you should be able to create middleware functions for any type of input validation.</p><h2 id=\"2-role-based-access-control\">2. Role-Based Access Control</h2>\n<p>Whenever a hierarchy exists in an organization, there is a need for a role-based web application.</p><p>Roles could be anything from Administrator to the normal user. A role is typically associated with the real role of a person in the business hierarchy.</p><p>A web application could have 1 or more roles. In the case of 1 role, there is no need to have authorization-based access control, except for the requirement to check whether the user is logged in.</p><p>But when the role count increases to 2, you need to have proper access control.</p><p>The user of one role shouldn’t be able to perform tasks that should only be performed by the user of another role.</p><p><strong>For Example:</strong> A normal user shouldn’t be able to perform a task such as creating new users in the application which according to business logic, only an Administrator should be able to perform.</p><h2 id=\"3-session-management\">3. Session Management</h2>\n<p>Managing user sessions includes creating, validating and deleting session cookies.</p><p>A session cookie leakage could lead to all sorts of problems including account takeover.</p><p>It’s a best practice to delete the session cookies from the database after the user logs out to ensure that the cookie can no longer be used by anyone in case an attacker has physical access to the user’s computer.</p><h2 id=\"4-http-security-headers-configuration\">4. HTTP Security headers configuration</h2>\n<p>Some HTTP security headers need to be in place to prevent various types of attacks.</p><p>This page from <a href=\"https://infosec.mozilla.org/guidelines/web_security\">Mozilla</a> explains exactly what you need to understand and implement in the application to ensure that all browser-related security requirements are met.</p><h2 id=\"5-error-handling\">5. Error Handling</h2>\n<p>Handling the errors the right way in the application is very important. Default error pages of the servers and frameworks are known to reveal information that could be useful to attackers for future exploitation and discovery of new attack scenarios.</p><p><strong>For Example:</strong> A custom error page like this will prevent the leakage of any information.</p><hr>\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/Wikimedia_error_404.png\" alt=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/Wikimedia_error_404.png\"  data-is-external-image=\"true\"></figure><hr>\n<h2 id=\"6-secure-javascript\">6. Secure Javascript</h2>\n<p>Creating functionality in Javascript is super easy but when it comes to client-side security, it’s a rough road.</p><p>When it comes to input validation, the first tip is going to help you. But writing secure client-side Javascript is more than that.</p><p>This page from <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security\">Mozilla</a> is going to help you through your journey of your secure by design web application’s client-side.</p><h2 id=\"7-patching\">7. Patching</h2>\n<p>Outdated softwares almost always have known vulnerabilities. That’s where patching the software and libraries helps your overall web application security posture to be ideal for security by design principles.</p><p>Having outdated software doesn’t mean only one component could be attacked, it certainly affects the whole application.</p><p>You should ensure that your code is not relying on any sort of outdated version of a library. Patching or updating those libraries to the latest versions routinely is a major step towards the security of your web applications.</p><h1 id=\"conclusion\">Conclusion</h1>\n<p>Following all the 7 tips listed above will improve your security posture to the next level.</p><p>I usually post tips for developers, so feel free to browse through my blog.</p><p>Soon, I’ll be going through these tips with more details and examples.</p><p>So, Until then: STAY TUNED!</p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-01-15T15:31:50+01:00",
            "date_modified": "2024-11-30T17:51:50+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/guide-to-whitebox-pentest.html",
            "url": "https://blog.rockbytesec.com/guide-to-whitebox-pentest.html",
            "title": "Guide to Whitebox Pentest",
            "summary": "Reading code is like a Pentester’s superpower. Although it takes a lot of time to get good at it just like any other skill. But once you know how to&hellip;",
            "content_html": "<p>Reading code is like a Pentester’s superpower. Although it takes a lot of time to get good at it just like any other skill.</p><p>But once you know how to read and understand code efficiently in multiple languages, you can leverage that superpower to find the vulnerabilities that couldn’t have been found.</p><p>These are the steps to make sure to make the best out of your practice of reading code:</p><h2 id=\"1-know-how-to-code-and-know-computer-science\">1. Know how to code and know Computer Science.</h2>\n<p>Reading the code comes after knowing how to code. Most of the hackers out there preach that you don’t need to know how to code to be a hacker and that’s absolutely a lie.\nLearning how to code should be the first thing you have to do in your journey to become a hacker. Learn to code not in one but multiple languages.\nFirst, learn to write code in Python and then C++. This way you’d understand programming concepts, low-level and object-oriented stuff.\nOn top of this, you should know Computer Science concepts in depth.\nAll of this is important to have technical mastery in the field of CyberSecurity.</p><h2 id=\"2-know-how-to-pentest-blackbox-applications\">2. Know how to Pentest BlackBox applications</h2>\n<p>Having done some BlackBox Pentests is a great way to have knowledge of vulnerabilities that could ever exist in the applications.\nIf you know what vulnerabilities could possibly exist in a BlackBox application, then certainly you know what vulnerabilities could exist in a WhiteBox Application after you have read the code.</p><h2 id=\"3-setting-up-the-environment\">3. Setting up the environment</h2>\n<p>You could be the best hacker in the world, you could be James Bond of the hackers’ world. But you can only perform so much without a perfect environment setup to start with.</p><p>Here is the essential list of what you’ll need to set to read code:</p><ul>\n<li>The application should be running with debugging enabled.</li>\n<li>A perfect IDE connected to the debugging port of the application.</li>\n<li>Set a breakpoint</li>\n<li>Test if the IDE stops at the breakpoint</li>\n</ul>\n<h2 id=\"4-reading-and-understanding-the-code\">4. Reading and Understanding the code</h2>\n<p>Ideally, the IDE will outline the functions of the application in the code. Go through each function one by one, by using the corresponding functionality in the application all while setting breakpoints, to understand their role in the application.</p><p>After understanding the functions, you should be able to understand the developer’s writing pattern and business logic. Also, You should be able to understand the role of each function in the code.</p><p>Finding vulnerabilities becomes so much easier when you have a complete map of the application’s functions in mind.</p><h2 id=\"5-finding-the-vulnerabilities\">5. Finding the Vulnerabilities</h2>\n<p>If you have done all the above steps correctly, then you’ll be automatically figuring out the possibilities of vulnerabilities.</p><blockquote>\n<p>As this is just an overview of WhiteBox Pentest, I’ll going over every step in detail. Stay Tuned!</p></blockquote>\n",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-01-15T15:29:43+01:00",
            "date_modified": "2024-11-30T17:51:46+01:00"
        }
    ]
}
